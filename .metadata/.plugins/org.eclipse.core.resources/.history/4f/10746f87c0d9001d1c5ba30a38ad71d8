package modelo;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import exepciones.ErrorEnCargaDeDatos;
import lombok.Data;

@Data
public class Resultado {
	private Fase fase;
	private Ronda rondaPronostico;
	private Ronda rondaResultado;
	private double multiplicadorDePuntos;
	private int puntosPorAcertar;
	private int puntosPorErrar;
	private List<Persona> apuestasResultado = new ArrayList<>();
	private Map <String, Fase> personasPorFase = new HashMap<>();
	private Map <Integer, Persona> puntajeTotalPorPersona = new HashMap<>();
	
	
	
	public Resultado(Ronda rondaPronostico, Ronda rondaResultado, double multi, int acerto, int erro) throws ErrorEnCargaDeDatos {
		this.rondaPronostico = rondaPronostico;
		this.rondaResultado = rondaResultado;
		this.multiplicadorDePuntos = multi;
		this.puntosPorAcertar = acerto;
		this.puntosPorErrar = erro;

		this.setPuntajeApostador();
		this.setPuntajeTotalPorPersona();
		
		
	}
	public Resultado() {
		
	}



	public void setPuntajeApostador() throws ErrorEnCargaDeDatos {

		
		for (Partido partidoResultado : this.getRondaResultado().getPartidos()) {

			int idPartidoR = partidoResultado.getIdPartido();		//obtengo el id del partido resultado
			String rondaPartido = partidoResultado.getRonda();		//obtengo a que ronda pertenece el partido
			int ganadorR = partidoResultado.getGanador();			//obtengo que equipo gano 1=Equipo1, 2=Empate, 3=Equipo2
			
			Iterator<Partido> iterador = this.getRondaPronostico().getPartidos().iterator();
			
			while(iterador.hasNext()) {
			
				Partido partidoPronostico = iterador.next();
				
				String nombreParticipante = partidoPronostico.getParticipante();	//obtengo el nombre del participante
				int idPartidoP = partidoPronostico.getIdPartido();					//obtengo el id del partido
				int idPersonaP = partidoPronostico.getIdParticipante();				//obtengo el id del participante
				int ganadorP = partidoPronostico.getGanador();						//obtengo a que equipo se aposto  1=Equipo1, 2=Empate, 3=Equipo2
								
				boolean controlId = idPartidoP == idPartidoR;						//evaluo si el valor del id del partido coincide en ambos
				boolean resultadoApuesta = ganadorR == ganadorP;					//evaluo si el resultado del ganador coincide con el resultado apostado
				
				if (controlId) {													//si los id de los partidos son iguales
					Persona persona = new Persona();								//instancio un nuevo objeto persona
					persona.setId(idPersonaP);											//al objeto persona creado le asigno el id obtenido en pronostico
					persona.setNombre(nombreParticipante);								//al objeto persona creado le asigno el nombre obtenido en pronostico
					persona.setFase(rondaPartido);										//al objeto persona creado le asigno la ronda obtenido en resultado
					
					if (resultadoApuesta) {											//si el resultado de la apuesta coincide o no, sumo o resto los puntos enviados por parametros segun corresponda
						persona.setPuntaje(this.getPuntosPorAcertar());	
						iterador.remove();											//se remueve la linea para liberar memoria y tiempo de ejecucion
					}	else {
						persona.setPuntaje(this.getPuntosPorErrar());
						iterador.remove();
					}
					this.getApuestasResultado().add(persona);						//se agrega la persona a la nueva lista con los resultados
					
				}
			}
		}		
		setPuntajeFinalLista();		//llamo al metodo privado setPuntajeFinalLista para que me cree una nueva lista de tipo hashmap filtrandome por participante unico 
	}
	
	
	private void setPuntajeFinalLista() {									//el metodo es privado para que no se pueda acceder desde afuera 
			
		for (Persona p : this.getApuestasResultado()) {						//itero la lista con el resultado de cada partido por persona
			int id = p.getId();												//obtengo el id de la persona
			String faseId = p.getFase();
			

			if(getPersonasPorFase().containsKey(faseId)) {
				
				Fase f = getPersonasPorFase().get(faseId);
				
				if(f.getPuntajeFinalLista().containsKey(id)) {					//si el map contiene el id
					 
					Persona personaMap = f.getPuntajeFinalLista().get(id);		// obtengo el objeto persona del map utilizando el id como referencia de indice llave:valor
					
					int puntosPersonaLista = p.getPuntaje();					// obtengo el puntaje de la persona iterada
					int puntosPersonaMap = personaMap.getPuntaje();				// obtengo el puntaje de la persona del map ya filtrada
					
					personaMap.setPuntaje(puntosPersonaMap + puntosPersonaLista);	//seteo el nuevo puntaje de la persona del map 
				}	else {														//si el id no existe en el map
					f.getPuntajeFinalLista().put(id, p);							//agrego al map a la nueva persona, enviandole como llave el id y el objeto Persona como valor(este contiene el puntaje inicial)
				}
				
				
			} else {
				Fase fa = new Fase();
				getPersonasPorFase().put(faseId, fa);
			}
		}
		
			
	}
		
	
	public int getCantidadDePartidosDeFase(String fase) {					//metodo para obtener el total de partidos por cada fase
			int total = 0;	
			for (Partido p : this.getRondaResultado().getPartidos()) {		//obtengo todos objeto de tipo Partido de la lista resultados
				
				if(p.getRonda().equals(fase)) {								//si el atributo ronda es igual a la fase enviada por parametro, se suma un punto
					total +=1;
				}
			}
			return total;													//se retorna el total
	}
	
	private void setPuntajeTotalPorPersona() {								//metodo para obtener el total de puntos por persona en todas las fases
		
		for (Fase f : this.getPersonasPorFase().values()) {					//recorro todas las fases ya filtradas y obtengo su valor, es decir un objeto de tipo Fase
			
			for (Persona per : f.getPuntajeFinalLista().values()) {			//recorro el atributo PuntajeFinalLista del objeto fase y obtengo su valor, es decir el objeto de tipo persona
				
				int pId = per.getId(); 										//obtengo el id de la persona
				String nombre = per.getNombre();							//obtengo el nombre
				int puntaje = per.getPuntaje();								//obtengo el puntaje
				String fase = "Total";										//asigno total como referencia a todas las fases
				
				Persona p = new Persona(nombre, pId, puntaje, fase);		//cre un nuevo objeto persona con las variables anteriores para no pisar datos
				
				
				if(this.getPuntajeTotalPorPersona().containsKey(pId)) {				//si el map PuntajeTotalPorPersona contiene una persona con el pId
					int puntajeActual = this.getPuntajeTotalPorPersona().get(pId).getPuntaje();			//obtengo el puntaje de esa persona con el pId verificado anteriormente
					this.getPuntajeTotalPorPersona().get(pId).setPuntaje(puntaje + puntajeActual);		//a la persona verificada anteriormente y seleccionada con el pId le agrego el nuevo puntaje
					
					
				}	else {
					this.getPuntajeTotalPorPersona().put(pId, p);		//si la persona no esta en el map la agrego
				}
				
			}
		}
			
		}
}

	


	
		
	

