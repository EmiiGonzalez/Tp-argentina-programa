package baseDatos;

import java.sql.*;
import java.util.Map;

import lombok.Data;
import modelo.Persona;
import modelo.Resultado;
@Data
public class BaseDeDatos {

	private String driver;
	private String ip;
	private String usuario;
	private String pass;
	private String api;
	private String dbName;
	
	public BaseDeDatos(String api, String ip,String dbName, String usuario, String pass) {
		this.ip = ip;
		this.usuario = usuario;
		this.pass = pass;
		this.api = api;
		this.dbName = dbName;
	}
	public BaseDeDatos() {
	}
	
	public void setDatosEnBase(Resultado datos, String control) {
		
		try {
			Connection con=DriverManager.getConnection("jdbc:"+this.getApi()+"://"+this.getIp()+"/"+this.getDbName(),this.getUsuario(),this.getPass());		//conexion 
			Statement stmt=con.createStatement();  	//objeto para ejecutar comandos sql
			System.out.println("conecto");  
			
			String query = "INSERT INTO persona (id, nombre, \"puntajeTotal\") VALUES (?, ?, ?) ON CONFLICT (id) DO UPDATE SET nombre = EXCLUDED.nombre, \"puntajeTotal\" = EXCLUDED.\"puntajeTotal\"";
			//insertara en la tabla personas un registro nuevo, verificara si hay conflictos en la columna id, en caso que lo haya, se actualizaran los datos de los demas campos
			PreparedStatement ps = con.prepareStatement(query);		//para preparar la query
			
			for (Persona persona : datos.getPuntajeTotalPorPersona().values()) {
				String nombre = persona.getNombre();
				int id = persona.getId();
				int puntaje = persona.getPuntaje();
				
				ps.setInt(1, id);
				ps.setString(2, nombre);
				ps.setInt(3, puntaje);
				ps.executeUpdate();
			}
				stmt.close();
				con.close();
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
}
